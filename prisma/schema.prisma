generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

model User {
  id       Int    @id @default(autoincrement())

  fullName String
  email String @unique
  password String
  role         UserRole          @default(USER)

  provider String?
  providerId String?

  orders       Order[]
  cart         Cart?
  verification VerificationCode?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id       Int     @id @default(autoincrement())
  name     String @unique
  products Product[]
}


model Product {
  id       Int     @id @default(autoincrement())
  name     String
  imageUrl String
  active   Boolean @default(false)

  category Category @relation( fields: [categoryId], references: [id])
  categoryId Int
  ingredients Ingredient[]
  items ProductItem[]



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  price    Int
  size     Int
  type     Int
  carbs    Int
  fats     Int
  kcal     Int
  proteins Int
  weight   Int

  cartItems   CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  products Product[]
  items  CartItem[]

  createdAt DateTime @default(now())
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  totalAmount Int @default(0)
  token String?

  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  productId Int
  product   ProductItem @relation(fields: [productId], references: [id])

  ingredients Ingredient[]

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  token String

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?

  items Json

  fullName String
  email String
  phone String
  address String
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}